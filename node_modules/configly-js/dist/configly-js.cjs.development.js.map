{"version":3,"file":"configly-js.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["const axios = require('axios');\nconst qs = require('qs');\nconst removeSlash = require('remove-trailing-slash');\n\nconst VERSION = require('../package.json').version;\n\nconst GET_API_PATH = '/api/v1/value';\n\ninterface ConfiglyOptions {\n  host?: string;\n  enableCache?: boolean;\n  timeout?: number;\n}\n\n/**\n * Config.ly: the dead simple place to store and retrieve your static/config data.\n *\n * Remember: *do NOT* assign the result of a get() to a long-lived variable; in order for\n * the value to fetch from the server, you must call get().\n *\n * Each get(key) returns a Promise; the first argument to the Promise fulfillment method is the\n * Configly value for the supplied key. Please see the example:\n *\n * const Configly = require('Configly');\n * const configly = Configly.init('API_KEY');\n *\n * configly.get('keyOne').then((valueForKeyOne) => console.log(valueForKeyOne));\n *\n * // or\n *\n * const run = async () => {\n *   return await configly.get('keyOne');\n * }\n *\n * Note that get(key) may make a server request or fetch a cached value. You should\n * assume it'll make a (fast) HTTP request. If you need something guaranteed to be faster, we\n * recommend storing the value to a local variable; BUT, be aware that this means you won't\n * receive updates to that variable, so be sure to call get() periodically.\n */\nexport class Configly {\n  private static instance?: Configly;\n  private cache: Record<string, any>;\n  private cacheTtl: Record<string, number>;\n  private apiKey: string;\n  private options: ConfiglyOptions;\n\n  /**\n   * This method should NOT be called externally; please use Configly.init().\n   */\n  private constructor () {\n    this.cache = {};\n    this.cacheTtl = {};\n    this.apiKey = '';\n\n    this.options = {\n      host: 'https://api.config.ly',\n      timeout: 3000,\n      enableCache: true,\n    }\n  }\n\n  /*\n   * Initialize the `Configly` singleton with your account's `API Key` and an\n   * optional dictionary of `options`.\n   *\n   * @param {String} apiKey - your readonly Config.ly API key. You can find it at\n   *   http://config.ly/config.\n   * @param {Object} [options] (optional)\n   *     @property {Number} host (default: https://config.ly/) - Overrides the host for requests\n   *     @property {Number} enableCache (default: true) - disables the cache, resulting in an HTTP\n   *       fetch on every `get` call\n   *     @property {Number} timeout (default: 3000) - ms timeout for requests to Configly for data.\n   * @return Configly instance\n   * @throws Error if an API Key is not supplied or if init is called multiple times.\n   */\n  static init(apiKey: string, options?: ConfiglyOptions) {\n    if (!apiKey || !apiKey.length || apiKey.length == 0) {\n      throw new Error('You must supply your API Key. You can find it by logging in to Config.ly');\n    }\n\n    if (!!Configly.instance) {\n      throw new Error('configly.init() is called multiple times. It can only be called once.');\n    }\n\n    let inst = new Configly();\n    options = options || {};\n    inst.options.host = removeSlash(options.host || inst.options.host);\n    inst.options.enableCache = \n        options.enableCache === undefined ? inst.options.enableCache : options.enableCache;\n    inst.apiKey = apiKey;\n    inst.options.timeout = options.timeout || inst.options.timeout;\n\n    Configly.instance = inst;\n    return Configly.instance;\n  }\n\n  /*\n   * @return existing Configy instance. Configly.init() must be called before any invocation of\n   * getInstance()\n   */\n  static getInstance(): Configly {\n    if (!Configly.isInitialized()) {\n      throw new Error('Configly.getInstance() is called before Configly.init(); you must call init.');\n    }\n    return Configly.instance!;\n  }\n\n  /*\n   * @return true if init() has been called\n   */\n  static isInitialized(): boolean {\n    return !!Configly.instance;\n  }\n  static getUnixTimestampSecs(): number {\n    return Math.round(Date.now() / 1000);\n  }\n\n  _isCached(key: string): boolean {\n    let value = this.cache[key];\n    if (!value) {\n      return false;\n    }\n    if (this.cacheTtl[key] < Configly.getUnixTimestampSecs()) {\n      return false\n    }\n    return true;\n  }\n\n  _cacheGet(key: string): any {\n    return this.cache[key];\n  }\n\n  /**\n   * Fetch the value for the supplied key. This is an async call; it may be lightning fast as the\n   * value may be cached.\n   *\n   * Configly.init() must be called before any invocation of get\n   *\n   * @param {String} key - the key to fetch.\n   * @param {Object?} [options] overrides the global parameters set in the constructor for this\n   *  `get` request only (optional)\n   *     @property {Number} enableCache (default: true) - disables the cache, resulting in an HTTP\n   *       fetch on every `get` call.\n   *     @property {Number} timeout (default: 3000) - timeout for request to Configly for data in ms.\n   * @return { Promse<String | Number | Boolean | Array | Object | Error> } returns, on success,\n   *   a promise of fulfilled with the stored value(s) as typed in Config.ly. On error, returns\n   *   a failed promise with error:\n   *     - TypeError if key is not a string or omitted\n   *     - Error if key an empty string\n   */\n  get(key: string, options?: ConfiglyOptions): Promise<any> {\n    if (typeof key !== 'string') {\n      return Promise.reject(new TypeError('key must be a string'));\n    }\n    if (!key || key.length == 0) {\n      return Promise.reject(new Error('key must be a non-empty string'));\n    }\n\n    options = options || {};\n\n    const headers: Record<string, string> = {\n      'Accept': 'application/json',\n    };\n\n    // XXX: I think setting custom headers of X- is deprecated but I couldn't find another good\n    // header to use.\n    headers['X-Lib-Version'] = ['configly-node', VERSION].join('/');\n\n    let cacheIsEnabled = true;\n    if (options.enableCache !== undefined) {\n      cacheIsEnabled = options.enableCache;\n    } else if (!this.options.enableCache) {\n      cacheIsEnabled = false;\n    }\n\n    // Check the cache\n    if (cacheIsEnabled && this._isCached(key)) {\n      return Promise.resolve(this._cacheGet(key));\n    }\n\n    let url = `${this.options.host}${GET_API_PATH}`;\n    return axios.get(\n      url,\n      {\n        auth: {\n          username: this.apiKey,\n        },\n        headers,\n        params: { keys: [ key ] },\n        paramsSerializer: (params: any) => {\n          return qs.stringify(params, {arrayFormat: 'brackets'})\n        },\n        timeout: options.timeout || this.options.timeout || 3000,\n      }\n    ).then((response: any) => {\n      let { value, ttl } = response.data.data[ key ] || {};\n\n      // There should always be a TTL. But just in case.\n      ttl = ttl || 60;\n      if (cacheIsEnabled && value !== undefined) {\n        this.cacheTtl[key] = Configly.getUnixTimestampSecs() + ttl;\n        this.cache[key] = value;\n      }\n\n      return value;\n    }).catch(Configly.handleGetError);\n  }\n  static makeError(status: string, message: string, originalError: any) {\n    return { status, message, originalError }\n  }\n\n  static handleGetError(error: any) {\n    let status = ERRORS.OTHER;\n    let message = [\n      'Something went wrong. Have you upgraded to the latest client?',\n      \"Take a look at 'originalError' inside the error object for more details.\"\n    ].join('');\n\n    if (error.response) {\n      const statusCode: number = error.response.status;\n      status = statusCode === 401 ? ERRORS.INVALID_API_KEY : ERRORS.OTHER;\n      message = (error.response.data || '').substring(0, 1000);\n    } else if (error.code === 'ECONNREFUSED') {\n      status = ERRORS.CONNECTION_ERROR;\n      message = [\n        'Configly didn\\'t receive an HTTP response.',\n        'This could be because of a network disruption with the server or a bad supplied hostname.',\n        'If you\\'ve supplied a host parameter, please ensure it is correct.',\n        'Otherwise, try again.'\n      ].join(' ');\n    }\n    return Promise.reject(Configly.makeError(status, message, error));\n  };\n\n  /**\n   * Destroys singleton; really meant for testing snd likely should not be used\n   * externally.\n   */\n  destroy() {\n    Configly.instance = undefined;\n  }\n}\n\nexport const ERRORS = {\n  OTHER: 'OTHER',\n  CONNECTION_ERROR: 'CONNECTION_ERROR',\n  INVALID_API_KEY: 'INVALID_API_KEY',\n};\nObject.freeze(ERRORS);\n\nexport default Configly;"],"names":["axios","require","qs","removeSlash","VERSION","version","GET_API_PATH","Configly","cache","cacheTtl","apiKey","options","host","timeout","enableCache","init","length","Error","instance","inst","undefined","getInstance","isInitialized","getUnixTimestampSecs","Math","round","Date","now","_isCached","key","value","_cacheGet","get","Promise","reject","TypeError","headers","join","cacheIsEnabled","resolve","url","auth","username","params","keys","paramsSerializer","stringify","arrayFormat","then","response","data","ttl","handleGetError","makeError","status","message","originalError","error","ERRORS","OTHER","statusCode","INVALID_API_KEY","substring","code","CONNECTION_ERROR","destroy","Object","freeze"],"mappings":"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"}